"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
const asyncChunks = require("async-chunks");
const reBreak = /\r?\n/;
if (typeof Symbol.asyncIterator === 'undefined') {
    Object.assign(Symbol, { asyncIterator: Symbol.for('Symbol.asyncIterator') });
}
module.exports = function asyncLines(stream) {
    return __asyncGenerator(this, arguments, function* asyncLines_1() {
        let buffer = '';
        try {
            for (var _a = __asyncValues(asyncChunks(stream)), _b; _b = yield __await(_a.next()), !_b.done;) {
                const chunk = yield __await(_b.value);
                buffer += chunk;
                for (let pos = buffer.search(reBreak); pos !== -1; pos = buffer.search(reBreak)) {
                    yield buffer.slice(0, pos);
                    if (buffer[pos] === '\r') {
                        buffer = buffer.slice(pos + 2);
                    }
                    else {
                        buffer = buffer.slice(pos + 1);
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (buffer.length > 0)
            yield buffer;
        var e_1, _c;
    });
};
