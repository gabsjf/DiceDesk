/**
 * A promise-based data structure which allows tasks to be performed concurrently and resolved serially.
 */
export default class PoolQueue {
    private readonly concurrency;
    private readonly semaphore;
    private tail;
    constructor(concurrency: number);
    /**
     * Submit a task to be completed
     *
     * @param task - an asynchronous function which will be executed concurrently
     * @returns a Promise containing the completed work. While the task is executed concurrently, the returned Promise is fulfilled serially in the order it was submitted.
     */
    submit<T>(work: () => Promise<T>): Promise<T>;
    /**
     * Wait until the queue has at least one free worker.
     */
    poll(): Promise<void>;
    /**
     * Wait until the queue has no more work to complete.
     */
    drain(): Promise<void>;
}
