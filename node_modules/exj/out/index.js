#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const options_1 = __importDefault(require("./options"));
const async_lines_1 = __importDefault(require("async-lines"));
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const pool_queue_1 = __importDefault(require("pool-queue"));
const path_1 = require("path");
const os_1 = require("os");
function isStringArray(x) {
    return Array.isArray(x) && x.length > 0 && x.every(item => typeof item === 'string');
}
let poolQueue;
function execFileAsync(cmd, args, options = {}) {
    return new Promise((resolve, reject) => {
        child_process_1.execFile(cmd, args, options, (err, stdout, stderr) => {
            stderr && console.error(stderr);
            err ? reject(err) : resolve(stdout.trim());
        });
    });
}
function EXEC(strings, ...replacements) {
    const opts = strings.reduce((acc, str, i) => {
        const next = [...acc, ...str.trim().split(/ +/).filter(x => x.length)];
        if (i >= replacements.length) {
            return next;
        }
        const replacement = replacements[i];
        return next.concat(typeof replacement === 'string' ? replacement : JSON.stringify(replacement));
    }, []);
    return execFileAsync(opts[0], opts.slice(1));
}
function evalFn(fnText) {
    return __awaiter(this, void 0, void 0, function* () {
        const configDir = path_1.join(os_1.homedir(), '.exj'), packageJson = path_1.join(configDir, 'package.json'), resolveFrom = require('resolve-from'), packageNames = options_1.default.requires.map(x => x.includes(':') ? x.substring(0, x.indexOf(':')) : x), packages = yield Promise.all(packageNames.map((packageName) => __awaiter(this, void 0, void 0, function* () {
            let pkg = resolveFrom.silent(process.cwd(), packageName);
            if (!pkg) {
                pkg = resolveFrom.silent(configDir, packageName);
            }
            if (!pkg) {
                if (!fs_1.existsSync(configDir)) {
                    fs_1.mkdirSync(configDir);
                }
                if (!fs_1.existsSync(packageJson)) {
                    fs_1.writeFileSync(packageJson, '{}');
                }
                yield execFileAsync('npm', ['i', '--silent', packageName], { cwd: configDir });
                pkg = resolveFrom(configDir, packageName);
            }
            return require(pkg);
        }))), pkgImports = options_1.default.requires.map(x => {
            if (x.includes(':')) {
                return x.substring(x.indexOf(':') + 1);
            }
            return x.toLowerCase()
                .replace(/[^a-z]+([a-z])/g, (_, f) => f.toUpperCase())
                .replace(/^[A-Z]/, x => x.toLowerCase());
        });
        const fn = new Function(...pkgImports, 'EXEC', `
      return ${fnText}
    `)(...packages, EXEC);
        if (typeof fn === 'function') {
            return fn;
        }
        else {
            throw `'fn' argument "${fnText}" did not evaluate to a JavaScript function`;
        }
    });
}
function processText(text, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        let result = fn(text);
        if (result && result.then && result.catch) {
            poolQueue = poolQueue || new pool_queue_1.default(options_1.default.concurrency);
            result = yield poolQueue.submit(() => result);
        }
        else if (options_1.default.execResult) {
            poolQueue = poolQueue || new pool_queue_1.default(options_1.default.concurrency);
            result = yield poolQueue.submit(() => __awaiter(this, void 0, void 0, function* () {
                if (!isStringArray(result)) {
                    throw new Error(`result to execute was not an Array of strings: ${JSON.stringify(result)}`);
                }
                return execFileAsync(result[0], result.slice(1));
            }));
        }
        if (result === null || result === undefined) {
            return;
        }
        if (typeof result !== 'string') {
            console.log(JSON.stringify(result));
        }
        else {
            console.log(result);
        }
    });
}
function processJson(text, fn) {
    if (Array.isArray(text)) {
        text = '[' + text.join(',') + ']';
    }
    return processText(JSON.parse(text), fn);
}
function printErrorAndExit(err) {
    console.error(err.toString());
    process.exit(1);
}
function main(app) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield app();
            process.exit(0);
        }
        catch (err) {
            printErrorAndExit(err);
        }
    });
}
main(() => __awaiter(this, void 0, void 0, function* () {
    var e_1, _a;
    if (options_1.default.showHelp) {
        const readme = fs_1.readFileSync(require.resolve('../README.md')).toString().replace(/<\/?(em|b|pre)>/g, '');
        throw `Usage: ${readme.match(/SYNOPSIS\n\s*(.*)/)[1]}\n
       ${readme.substring(readme.indexOf(' OPTIONS'), readme.indexOf('EXAMPLES'))}`;
    }
    const fnText = options_1.default.fnFile ? fs_1.readFileSync(options_1.default.fnFile).toString() : options_1.default.fnText || '', fn = yield evalFn(fnText), processInput = (text) => (options_1.default.json ? processJson : processText)(text, fn).catch(printErrorAndExit), allLines = [], groupedLines = [], flushGroupedLines = () => {
        processInput(groupedLines.slice());
        groupedLines.length = 0;
    };
    try {
        for (var _b = __asyncValues(async_lines_1.default(process.stdin)), _c; _c = yield _b.next(), !_c.done;) {
            const line = _c.value;
            poolQueue && (yield poolQueue.poll());
            if (options_1.default.groupLines) {
                groupedLines.push(line);
                if (groupedLines.length === options_1.default.groupLines) {
                    flushGroupedLines();
                }
            }
            else if (options_1.default.eachLine) {
                processInput(line);
            }
            else {
                allLines.push(line);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (groupedLines.length) {
        flushGroupedLines();
    }
    if (!options_1.default.eachLine && !options_1.default.groupLines) {
        processInput(allLines.join('\n'));
    }
    poolQueue && (yield poolQueue.drain());
}));
//# sourceMappingURL=index.js.map